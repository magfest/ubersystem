# All settings in the top-level of this config file automatically become
# attributes on the global "c" object.  So if you want to access the
# "contact_url" setting, you can just use the c.CONTACT_URL variable.

# There are some features we want to turn on for development which might
# otherwise be turned off, such as pages which would normally only be enabled
# after a deadline or on-site.
dev_box = boolean(default=True)

# A list of python module names to import as plugins
plugins = string_list(default=list())

# List of directories we should look in for our templates
# This list is appended to by plugins, we'll look for a template
# in the following directories, stopping once one is found
template_dirs = string_list(default=list('%(module_root)s/templates'))

# The root URL to use when retrieving CSS and JS static files
# This can be set to, e.g., an S3 bucket or left as a relative URL
static_url = string(default="../static/")

# Some websites add tracking parameters to URLs, which can cause unexpected errors
# We scrub all parameter names in this list before they reach our page handlers
tracking_params = string_list(default=list("fbclid"))

# Turn on BADGES_SOLD estimation instead of using an exact count.
# Under the hood, this causes BADGES_SOLD to query the "pg_class" table
# for the number of rows in the Attendee table. The number of staff badges
# in the system is then subtracted from the attendee estimate for the final
# estimate of BADGES_SOLD.
#
# This estimate will probably be wrong, but it should be good enough for
# the first couple of days after prereg launch.
#
# NOTE: This will only work on postgresql.
badges_sold_estimate_enabled = boolean(default=False)

# This turns on our automated emails.  See the description in the [secret]
# section below for an explanation of how this works.
send_emails = boolean(default=False)

# This turns on/off our automated sms messages.
# (SMS is currently used by panels plugins)
send_sms = boolean(default=False)

# All dates/times in our code and emails will use this timezone.  This can be
# any timezone name recogized by the pytz module.
event_timezone = string(default="US/Eastern")

# These can be overridden to use Uber for other events.
# DO NOT override this mid-year because that will cause emails to be re-sent!
organization_name = string(default='MAGFest')
event_name = string(default='%(organization_name)s')
year = string(default='')

# This is a unique (between events!) ID used to prevent lookup collisions in QR codes.
# If not set, we generate one using the event_name and year variables above.
event_qr_id = string(default='')

# Link to an external schedule, like Guidebook
alt_schedule_url = string(default='')

# Link to the manual on how to operate the admin pages
# MAGFest's is set as the default since it's theoretically event-agnostic
admin_guide_url = string(default='https://www.notion.so/magfest/Uber-Guide-46e447e70b724618b8de96d37a77483c')

# This changes the text that references the main vendor hall
dealer_term = string(default='dealer')
dealer_helper_term = string(default='Dealer Assistant')
dealer_app_term = string(default='dealer application')
dealer_loc_term = string(default='dealers room')
dealer_reg_term = string(default='Dealer registration')

# If this is set, the nightly task that converts declined dealers' badges will also delete their group
delete_declined_groups = boolean(default=False)

# Allow or disallow admins to mark tables as shared.
# Only admins can mark dealer tables as shared as it is assumed there is a manual approval process.
allow_shared_tables = boolean(default=False)

# =============================
# Feature Flags
# =============================

# This controls whether or not we advertise check-in barcodes to attendees.
# Events who don't have barcode scanners will want to turn this off.
use_checkin_barcode = boolean(default=False)

# This controls whether or not we attempt to detect barcode scans
# and decrypt them using the barcode plugin. Turn this off if
# the scanning detection is going awry.
reg_uses_barcodes = boolean(default=True)

# This controls whether the promo code field will be visible on the
# registration form. True to allow attendees to use promo codes when
# registering, False to disallow promo codes.
badge_promo_codes_enabled = boolean(default=False)

# This controls whether the "Accessibility Services" request checkbox is
# displayed on the reg form.
accessibility_services_enabled = boolean(default=False)

# This controls whether a second "Confirm Email" field will be used on the
# preregistration form. True to force attendees to type their email twice
# during preregistration, False to hide the "Confirm Email" field altogether.
prereg_confirm_email_enabled = boolean(default=False)

# If this is set to True, prereg_open is not displayed to attendees.
hide_prereg_open_date = boolean(default=True)

# We expose some basic services, like an attendee lookup via jsonrpc.
api_enabled = boolean(default=True)

# This enables the Stripe payment option for kiosks, allowing attendees
# to quickly pay at-door using a credit card.
kiosk_cc_enabled = boolean(default=False)

# Set this to false if your event does not support group discounts.
groups_enabled = boolean(default=True)

# This turns on attendee accounts. During checkout attendees will be prompted
# for an account email and password, which they will use to manage the badges
# they purchase. If accounts are disabled, each attendee manages their own
# badge using a link sent to the attendee's email address.
attendee_accounts_enabled = boolean(default=True)

# If this is true, attendees under one account are put into a badge pickup group
# which admins can use to check multiple people in at once.
# TODO: Making this work without attendee accounts
badge_pickup_groups_enabled = boolean(default=True)

# If someone tries to log in or make and account and their email matches one
# of these domains, we tell them to use SSO instead
sso_email_domains = string_list(default=list())

# We have a site section that lets you view where attendees are from, but
# it's a little hacky and may interfere with the server starting, so it's
# turned off by default.
maps_enabled = boolean(default=False)

# Set a directory to download the zipcode database into for the map
maps_dir = string(default="/srv/reggie/data")

# How many hours a password reset token is good for before expiring.
password_reset_hours = integer(default=48)

# The minimum number of characters an account password must be.
minimum_password_length = integer(default=12)

# The special characters passwords may contain.
password_special_chars = string(default="!@#$%^&*-")

# A list that forces passwords to contain at least one character of a certain type.
# Possible conditions are: letter, lowercase_char, uppercase_char, number, special
password_conditions = string_list(default=list("letter", "number"))

# Turn this off to allow multiple attendee accounts to access the same badge.
one_manager_per_badge = boolean(default=True)

# Some events use wristbands, color-coded by age group. Set this to True to
# turn on that functionality; otherwise wristbands won't be part of check-in.
wristbands_enabled = boolean(default=False)

# Control optional add-ons for badges, not including badge_type_prices.
# Disables preordered merch and, hopefully, any add-ons added via plugin.
# Largely for letting dealer reg launch before add-ons are decided.
addons_enabled = boolean(default=True)

# If this is True, the check-in form will have a checkbox for
# marking the attendee as having received their merch
merch_at_checkin = boolean(default=False)

# If this is True, selling out of one kick-in level will
# automatically sell out kick-in levels above it
shared_kickin_stocks = boolean(default=False)

# True to show relevant features in the UI and enable relevant automated
# emails/notifications. False to UI hide features and disable notifications.
# NOTE: Even if these are set to False, the features will still _exist_ in the
# system, they will just be hard to reach and no relevant notifications will
# be sent.
attractions_enabled = boolean(default=True)
hotels_enabled = boolean(default=False)
mits_enabled = boolean(default=False)
mivs_enabled = boolean(default=False)
panels_enabled = boolean(default=False)
badge_printing_enabled = boolean(default=False)
art_show_enabled = boolean(default=False)

# Many events charge a fee for badge reprints. This controls how much that costs, in dollars.
badge_reprint_fee = integer(default=0)

# MAGFest provides staff rooms for returning volunteers.  In addition to the
# config options defined here, you must add a "room_deadline" setting to the
# [dates] section of the main repo's config when including this plugin.

# Email address which will be the sender for the hotel room emails.
ROOM_EMAIL_SENDER = string(default='MAGFest Staff Rooms <staffrooms@magfest.org>')

# In some of our pages and emails relating to hotel room nights, it makes sense
# to list the nights in order based on the start of the event rather than the
# first day of the week.
night_display_order = string_list(default=list("tuesday", "wednesday", "thursday", "friday", "saturday", "sunday","monday"))

# When people are able to pick up their room keys from the hotel front desk.
check_in_time = string(default='4pm')

# What time in the morning people need to check out of their hotel rooms.
check_out_time = string(default='12pm/Noon')

# A string appended to any place that reminds people to bring their Photo ID to check into the event.
extra_checkin_docs = string(default='')

# The path used to mount the app in cherrypy's mount tree. This may be
# different from the "path" setting if the server is running behind a
# reverse proxy with rewrite rules that change the URL path.
cherrypy_mount_path = string(default="")

cherrypy_profiler_on = boolean(default=False)
cherrypy_profiler_path = string(default="/tmp/")
cherrypy_profiler_aggregate = boolean(default=True)

# These are used for web server configuration and for linking back to our
# pages in emails; these definitely need to be overridden in production.
#
# If you change the effective `path` in the URL for your event, you must
# add it to `_server_to_url` in utils.py to ensure functionality with in-app
# API calls to other servers.
path = string(default="%(cherrypy_mount_path)s")
hostname = string(default="localhost")
url_root = string(default="http://localhost:80")
url_base = string(default="%(url_root)s%(path)s")

# This is the URL provided to outside services for redirecting back to the app
# Generally this will only need to be changed for localhost systems
redirect_url_base = string(default="")

# Redirect 404s to Uber's default URL
default_url = string(default="%(path)s")
default_url_priority = integer(default=1)

# This determines how many rows we'll load at once for the homepage
row_load_limit = integer(default=500)

# Venue name (hotel, convention center, etc) and physical mailing address
event_venue = string(default="")
event_venue_address = string(default="")

# MAGFest requires a signed and notarized consent form for minors.  To turn on
# this message and associated automated emails, set this to the URL of your
# event's consent form.  Leave it unset to turn off this functionality.
consent_form_url = string(default="")

# This link appears in preregistration pages and in some emails.
code_of_conduct_url = string(default="")

# This is a link for the event's data privacy policy.
privacy_policy_url = string(default="")

# This link is to give users a generic way to contact your organization.
contact_url = string(default="")

# This link will be included in confirmation emails.
prereg_faq_url = string(default="")

# This link will be used to show volunteers what perks they get.
volunteer_perks_url = string(default="../static_views/stafferComps.html")

# This link will be shown on the hotel step of the volunteer
# checklist, if hours_for_hotel is set.
staff_room_faq_url = string(default="")

# when you access the kiosk landing page, this is where it will redirect you
kiosk_redirect_url = string(default="../registration/register")

# This forms the base of a link to an external staff hotel request system.
# It is used to allow staff members to fill out a form requesting space
# and for department heads to approve their requests.
hotel_requests_url = string(default='https://tuber.magfest.org')

# These messages shown to attendees when they register at-door via kiosk
at_door_prepaid_msg = string(default="Your payment has been accepted, please proceed to the Preregistration desk to pick up your badge")
at_door_cash_msg = string(default="Thanks! Please queue in the cash line and have your photo ID and {} ready.")
at_door_manual_msg = string(default="Thanks! Please queue in the credit card line and have your photo ID and credit card ready.")
at_door_nopay_msg = string(default="You are already paid (or registered for a free badge) and should proceed to the preregistration desk to pick up your badge")
at_door_waived_msg = string(default="Since it's so close to the end of the event, your badge is free! Please proceed to the preregistration line to pick it up.")

# There are a huge slew of behaviors which are different before and during the
# event. For example, during the event admins can check people in and one-day badges
# are sold, if they are enabled. This switches between the "during the year" mode and
# the "on-site" mode.
at_the_con = boolean(default=False)

# If you want to ONLY let admins check people in without opening onsite sales or
# any other effects, use this option instead.
badge_pickup_enabled = boolean(default=False)

# This turns on a mix of features which are enabled during OR after the event
# and behaviors such as automated emails which are ONLY turned on afterwards.
post_con = boolean(default=False)

# This disables everything BUT the Stripe payment options for kiosks,
# allowing events to open at-door reg before their payment stations exist
only_prepay_at_door = boolean(default=False)

# When this is True, the only thing anyone can do is log in as a volunteer to
# view their shift schedule.  All other pages, including admin pages, will be
# disabled, with the idea being that the live database will be move to on-site
# and it would be a bad idea to keep a separate server running in parallel.
uber_shut_down = boolean(default=False)

# There are a few automated emails which are sent every week regarding things
# like duplicate registrations and unclaimed placeholder badges.  We usually
# turn these off early in the year but turn them on after awhile once people
# have had time to take care of them, but we may change that now that we've
# made this a weekly rather than a daily email.
check_placeholders = boolean(default=True)

# Some events do not use badge numbers (or even necessarily badges, since they
# may just stamp your hand or give you a wristband or something).  Set this to
# indicate whether or not badges should ever get numbers.
numbered_badges = boolean(default=True)

# a 1-character prefix appended to any barcode (to make it easy to identify it as a barcode)
# try to pick something that's not base64 related, i.e. not A-Z,a-z,0-9,+,/ and not an equals sign
barcode_prefix_char = string(default="~")

# Anyone who is marked "need not pay" who does NOT have this badge type gets a separate line-item on
# their receipt for comping their badge, which helps us distinguish badge comps from normally-comped badges
default_comped_badge_types = string_list(default=list('staff_badge', 'contractor_badge', 'guest_badge'))

# MAGFest has customized badges for Staff and Supporters.  This means that badge
# numbers have to be assigned in advance for those badge types, and new ones
# cannot be created after those badges have been ordered.  Make this an empty
# list to turn off these preassigned and customized badges.
preassigned_badge_types = string_list(default=list())

# Some badge types should not be transferable because of privilege (Guest badges) or
# access level (Staff badges). This lists which badge types can be transferred, if any.
transferable_badge_types = string_list(default=list('attendee_badge'))

# When transfering a badge, we need to persist certain attributes such as the original
# date someone preregistered and their badge type, but we need to reset most other
# things.  This is a list of what needs to be reset, which is configurable so that
# other events with custom fields can add fields.
#
# This list is also used for repurchasing badges or purchasing importing badges
untransferable_attrs = string_list(default=list('first_name','last_name','legal_name','email','birthdate','zip_code','international','ec_name','ec_phone','onsite_contact','no_onsite_contact','cellphone','interests','age_group','staffing','requested_depts','transfer_code'))

# A list of attributes that get applied to the dealer prereg form if a dealer
# chooses to reapply with an imported group
group_reapply_attrs = string_list(default=list('name','zip_code','address1','address2','city','region','country','website','wares','categories','categories_text','description','special_needs'))

# A list of what statuses a dealer group can still edit their application in
# Dealers can never edit fee-affecting fields after applying (e.g., tables)
# Possible options: Imported, Pending Approval, Waitlisted, Approved, Declined, Cancelled
dealer_editable_status_list = string_list(default=list("Pending Approval", "Waitlisted"))

# As above, but this controls whether dealer groups can cancel their own applications
dealer_cancellable_status_list = string_list(default=list("Pending Approval", "Waitlisted"))

# If True, admins who don't have full access to /registration/ can only create badges
# in Pending status. These badges get put into a list that admins with /registration/
# access must review and approve before those individuals will receive any emails.
admin_badges_need_approval = boolean(default=False)

# By default, staff/volunteers are only allowed to work shifts in a maximum of
# three different departments. Historically, we've found that working in too
# many different departments can spread people too thin and cause burn out,
# even if the total number of hours worked isn't too high. STOPs can override
# this default max department amount by manually assigning a staffer to
# additional departments. Set this to 0 to allow staff/volunteers to work in
# as many departments as they wish.
max_depts_where_working = integer(default=3)

# Some departments don't use our shift system, so we don't want to email
# volunteers in those departments asking them to sign up for shifts.  Make this
# a list of department constants you want to be excluded from the shift system.
shiftless_depts = string_list(default=list())

# The following variables control how many hours of shifts a volunteer must be
# signed up for in order to receive a specific perk. If any of these is set to 0,
# that perk is turned off for the event.

# If shirts_per_staffer is set to 0 and this is not set to 0, staff get the same shirt
# that volunteers get. Otherwise, they get separate staff shirts with separate sizes.
hours_for_shirt = integer(default=6)

# Access to staff suite and/or tea room
hours_for_food = integer(default=12)

# Refunds are NOT automatic, this is used for display and report purposes only
hours_for_refund = integer(default=24)

# Only volunteers with Staff badges can qualify for this perk
# This often will be different based on the length of the event.
hours_for_hotel_space = integer(default=30)

# This is the number of extra blank staff badges that are included in
# our personalized badge export (/badge_exports/personalized_badge_zip)
blank_staff_badges = integer(default=50)

# Some events begin setting up the day of the event, others the week beforehand.
# This setting determines how many days in advance we begin tracking setup shifts.
setup_shift_days = integer(default=5)

# Some events may wish to have JIRA integration enabled so that admins can
# easily file issues. Turn this on and set the JavaScript source URLs to
# enable this integration.
jira_enabled = boolean(default=False)
jira_collector_urls = string_list(default=list())

# Some events may want to store an exact birthdate for attendees. If this option
# is turned on, then all registration forms will display and collect the exact
# birthdate. Turning this off will simply display a drop-down selection of the age
# groups defined below.
collect_exact_birthdate = boolean(default=True)

# Certain events need attendees' full addresses - others will only want some
# information. If this is turned off, attendees are only asked for their zipcode,
# emergency contact number, and cellphone number.
collect_full_address = boolean(default=False)

# Many events are run by non-profit organizations, which may want to collect
# arbitrary donations from attendees. Turn this on to collect nonprofit
# donations during pre-reg.
collect_extra_donation = boolean(default=False)

# If true, attendees not in groups can opt to defer their own badge.
self_service_deferrals_open = boolean(default=False)

# If this is set, deferring attendees will be prompted for a mailing address 
# and asked to pay this fee.
merch_shipping_fee = integer(default=15)

# If true, and we are NOT using Authorize.net, self-service refunds will exclude processing fees.
# Requires refund_cutoff to be set to enable self-service refunds.
# Admins can always choose to refund with or without fees when cancelling a receipt.
exclude_fees_from_refunds = boolean(default=True)

# This URL, if set, will show up alongside or without the above extra donation field
extra_donation_url = string(default="")

# We try to predict our tshirt needs, but sometimes we run out during the
# event.  Set this to True when that happens, and people receiving swag
# will automatically be added to the list of people who received all of
# their swag except a shirt, so we can contact them later.
out_of_shirts = boolean(default=False)

# This is the number of staff shirts that each staffer gets.
# You can populate [[staff_event_shirt]] to allow staff to choose to
# replace 1 or more of their staff shirts with event shirts.
#
# Staff shirts are for wearing on-shift. Use hours_for_shirt
# to grant staff and volunteers an event shirt instead.
shirts_per_staffer = integer(default=1)

# If this is true, staffers will be able to opt out of their staff shirt(s),
# and staff shirt size will not be shown on the registration form.
staff_shirts_optional = boolean(default=False)

# Some events give their staffers their special merch (such as swag shirts)
# at a separate location from the normal merch booth.  If this setting is true,
# then the merch page will have two separate buttons for merch and staff merch
# but otherwise those will be combined and all distributed at once.
separate_staff_merch = boolean(default=True)

# Different events have different policies for merch, such as offering
# a discount to staff. Override this list to remove the associated buttons
# from merch_admin/index
merch_ops = string_list(default=list('give_merch', 'discount', 'mpoints'))

# The max number of tables a dealer can apply for.  Note that the admin
# interface allows you to give a dealer a higher number than this.
max_tables = integer(default=4)
# The max number of badges which a dealer may apply for.
# If this is set to 0, dealers may have badges equal to the number of tables they buy + 1.
max_dealers = integer(default=20)

# The number of dealer apps we will accept before auto-waitlisting further
# applications. If dealer_reg_deadline is also set, we will auto-wailist
# dealers if either the deadline has passed or this number has been reached.
# Dealers who have been waitlisted/approved/declined and dealers who do not
# have to pay are not counted towards this cap. A value of 0 means no cap.
max_dealer_apps = integer(default=0)

# If true, a link to dealer registration will show on the prereg page
# and landing page while dealer registration is open.
dealer_reg_public = boolean(default=True)

artist_marketplace_fee = integer(default=75)
artist_marketplace_rules_url = string(default="")

# Number of badges necessary to qualify for the group discount.
min_group_size = integer(default=8)

# This is mostly relevant because we have dropdown lists of the number of
# badges, so we needed to pick an arbitrarily high number :)
max_group_size = integer(default=100)

# People often want to add badges to their group after they've registered.
# We don't usually want to let them do this 1 at a time (although there is
# a checkbox which turns this on for a group in the admin group form), so
# this is the minimum number of additional badges that the group has to buy
# to be able to add badges while still qualifying for the group discount.
min_group_addition = integer(default=5)

# Groups often immediately realize they've created the group with too few
# badges. If they want to add fewer than the minimum increment (see
# min_group_addition), their only recourse is to email registration and request
# the group size be increased. This setting gives groups a grace period, during
# which they can increase size of their group by a single badge. This setting
# is interpreted as a number of hours after the group is initially registered.
# Set this to 0 or less to completely disable the grace period.
group_update_grace_period = integer(default=24)

# Some events require an explicit legal agreement for volunteers as part of
# the volunteer checklist. For evernts where this is true, set this to true
# and make sure staffing/volunteer_agreement_item.html is included in the
# [volunteer_checklist] section of the INI.
#
# By default this is turned off.
volunteer_agreement_enabled = boolean(default=False)

# Much like the volunteer agreement, but for an emergency procedures document.
emergency_procedures_enabled = boolean(default=False)

# Emergency procedures documents might not always be ready when the volunteer
# checklist opens. When this is turned off, the link is removed from the step
# and the deadline is replaced with "Coming Soon!"
emergency_procedures_ready = boolean(default=False)

# This controls whether we ask volunteers to provide a name for a credits roll.
volunteer_credits_roll = boolean(default=False)

# These are just text telling volunteers when they should complete certain steps
# on the volunteer checklist.
volunteer_placeholder_deadline = string(default="November 6")
volunteer_checklist_deadline = string(default="November 13")
volunteer_food_deadline = string(default="November 14")
emergency_procedures_deadline = string(default="December 18")

# 

warn_if_server_browser_time_mismatch = boolean(default=True)

# Admin account emails such as password resets come from this address.
admin_email = string(default="Eli Courtwright <eli@courtwright.org>")

# Daily report emails come from this address.
reports_email = string(default='%(admin_email)s')

# General emails that don't fit any other category are sent from this address.
contact_email = string(default="MAGFest <contact@magfest.org>")

# Registration emails such as payment confirmations are sent from this address.
regdesk_email = string(default="MAGFest Registration <regdesk@magfest.org>")

# Volunteer-related emails are sent from this address.
staff_email = string(default="MAGFest Staffing <stops@magfest.org>")

# Dealer-related emails are sent from this address.
marketplace_email = string(default="MAGFest Marketplace <marketplace@magfest.org>")

# Dealer-related notifications for submitted and edited applications are sent to this address.
marketplace_notifications_email = string(default='%(marketplace_email)s')

# If this is set, then marketplace_notifications_email receives an email for
# every submitted dealer application. Otherwise, only edited dealer applications
# trigger an email.
notify_dealer_applied = boolean(default=False)

# Emails to panelists are sent from this address.
panels_email = string(default="MAGFest Panels <panels@magfest.org>")

# Emails to guests are sent from this address.
guest_email = string(default="MAGFest Guests <guests@magfest.org>")

# Emails relating to banned attendees are sent to and from this address.
security_email = string(default="MAGFest Security <security@magfest.org>")

# Emails relating to technical needs are sent to and from this address.
techops_email = string(default="MAGFest TechOps <techops@magfest.org>")

# Notifications about the charity step on guest checklists are sent here
charity_email = string(default="MAGFest Charity <charity@magfest.org>")

# Emails about badge add-ons (e.g., preordered merch) are sent from this address
merch_email = string(default="MAGFest Merch Team <merch@magfest.org>")

# Emails for Artist Marketplace applications are sent from this address.
artist_marketplace_email = string(default="")

# Emails for Art Show applications are sent from this address.
art_show_email = string(default="")
art_show_notifications_email = string(default='%(art_show_email)s')

# If set, then this email receives a BCC of all emails sent to art show applicants.
art_show_bcc_email = string(default="")

# Sender of emails related to the hotel lottery, and also shown as a contact email to attendees.
hotel_lottery_email = string(default="")

# These signatures are used at the bottom of many of our automated emails.
regdesk_email_signature = string(default='')
stops_email_signature = string(default='')
artist_marketplace_signature = string(default='')
marketplace_email_signature = string(default='')  # Dealers
guest_email_signature = string(default='')
art_show_signature = string(default='')
merch_email_signature = string(default='')

# This is the only non-"mailinator.com" address which a DEV box can send to.  No
# emails are sent from this address, so it doesn't need to be listed as a sender
# in your AWS account.
developer_email = string(default="eli@courtwright.org")

# These are all just constants which we happen to define here.  You can ignore
# these options and should probably never change or override them.
signups             = integer(default=1)  # not an admin access level, so handled separately
pseudo_group_badge  = integer(default=1)  # people registering in groups will get attendee badges
pseudo_dealer_badge = integer(default=2)  # dealers get attendee badges with a ribbon
email_re            = string(default="^[a-zA-Z0-9_\-+.]+@[a-zA-Z0-9_\-+.]+(\.[a-zA-Z0-9_\-+.]+){1,}$")

enable_pending_emails_report = boolean(default=True)

# The system sends warning emails to admin_email and regdesk_email
# when we have these number of attendee badges left.
badges_left_alerts = string_list(default=list('1500', '250'))


# NO LONGER USED.
#
# The attendee_tournaments module is no longer used, but has been
# included for backward compatibility with legacy servers.
#
# Side note: I'm on the fence about using "art" as an abbreviation for Attendee-Run Tournament.
art_email = string(default="MAGFest Console Department <consoles@magfest.org>")
art_email_signature = string(default="- The MAGFest Console Department")

# This URL is printed in the hotel lottery pages to direct attendees to read more about the lottery.
hotel_lottery_url = string(default="")

# If true, then users are asked to rank which choices are most important to them (listed under [[priorities]] but it's dates, room type, hotel)
hotel_lottery_pref_ranking = boolean(default=True)

# =============================
# mivs
# =============================

# Email address which will send emails
mivs_email = string(default="MAGFest Indie Videogame Showcase <mivs@magfest.org>")

# Goes at the bottom of all MIVS automated emails
mivs_email_signature = string(default=" - The MIVS Staff")

# The first year this showcase started. Used to calculate alumni options.
mivs_start_year = integer(default="2015")

# TODO: enforce this, possibly (dunno if it's really necessary, hard drive space is pretty cheap)
mivs_max_screenshot_size = integer(default=5242880)

# Number of comped badges per accepted game.
mivs_indie_badge_comps = integer(default=2)

# Number of codes required per game for our judges.  Studios must upload either
# one unlimited-use code or this many single-person codes.
mivs_codes_required = integer(default=7)

# Which types of game codes require that the applicant leave instructions on
# how the codes are used.
mivs_codes_requiring_instructions = string_list(default=list("password", "custom"))

# Config values which indicate a problem with the game.  This list is checked
# in a few places to determine whether a status indicated by a judge indicates
# a problem which stopped them from being able to judge the game.
mivs_problem_statuses = string(default="broken,bad_link,bad_code,could_not_play")

# If not set, we will go out and try to fetch various URLs and make sure they go through when the user submits the page
# This feature is a little experimental and doesn't look nice for the end user if it goes wrong
# (i.e. a page times out/etc)
mivs_skip_url_validation = boolean(default=True)

# Studios sometimes submit things at the VERY last minute, causing submission failures if our server time and their
# computer time disagree. This grace period, defined in minutes, is added to all submission deadlines on the backend.
mivs_submission_grace_period = integer(default=10)

# Studios have a certain number of days after their acceptance to confirm they will show at MIVS.
# Their custom confirmation deadline is calculated using this config option.
mivs_confirm_deadline = integer(default=14)

# We use a password in MIVS training material to confirm the studio actually did the training
mivs_training_password = string(default="mivs")

# External links to MIVS training materials that are updated every year
mivs_handbook_url = string(default="")
mivs_training_url = string(default="")
mivs_selling_url = string(default="")


# =============================
# mits
# =============================

# We offer up to this many complementary badges for each team member willing to
# work the hour requirements (configured below).
mits_badges_per_team = integer(default=3)

# The number of hours we require in order for team members to qualify for their
# complementary badges.  This is displayed but not yet enforced by the system.
mits_hour_requirement = string(default="at least 4 hours per day")

# When we tell people they can expect to hear back about whether their game has
# been accepted.  This is a string rather than a specific date so we can be vague.
mits_responses_expected = string(default="by the end of November")

# Email address which will send MITS automated emails.
mits_email = string(default="MAGFest Indie Tabletop Showcase <tabletop@magfest.org>")

# Goes at the bottom of all MITS automated emails.
mits_email_signature = string(default=" - The MITS Team")

# We use these (width, height) measurements to mark uploaded images as
# either a header or thumbnail. The measurements below are for Guidebook.
guidebook_header_size = string_list(default=list('640','240'))
guidebook_thumbnail_size = string_list(default=list('240','240'))

# Uploaded guidebook images (e.g., MITS, MIVS) must have one of the following file extensions.
guidebook_allowed_image_types = string_list(default=list("gif", "jpg", "jpeg", "png"))


# =============================
# panels
# =============================

# Vague description of when applicants should expect to hear back about their
# panel, e.g. "the end of October" or "the middle of August".
expected_response = string(default='')

# Panelists have a certain number of days after their acceptance to confirm they will run their panel.
# Their custom confirmation deadline is calculated using this config option.
panels_confirm_deadline = integer(default=0)

# While true, the schedule is not visible to non-admins.  This is a bool and not
# a date because we've never really been able to predict when the schedule will
# be ready, so we just set this to false whenever it is.
hide_schedule = boolean(default=True)

# Controls whether the "Is it okay to livestream your panel?" option appears on panel apps
# Alternatively, if you set more than two options under [[livestream]], this question
# is combined into a single "Is it okay to record or livestream your panel?" field.
can_livestream = boolean(default=False)

# Emails about changes to schedule items and other Guidebook items are sent TO this address.
# If the address is not set, these emails are disabled.
guidebook_updates_email = string(default="")

# These are the areas from which we'll show events to associated with panel
# applications on the schedule.
panel_rooms = string_list(default=list())

# These are the areas which we'll use to filter "Show only music rooms"
music_rooms = string_list(default=list())

# Signature at the end of every panel-related email.
panels_email_signature = string(default=" - MAGFest Panels Team")

# Attractions Notifications
panels_twilio_number = string(default="")
attractions_email = string(default="MAGFest Attractions <attractions@magfest.org>")

# A list of social media fields collected from panelists.
# The values in the list will be "fieldified" – converted to field names
# (lowercased, spaces and special characters removed, CamelCase to
# under_scored) and added as attributes on the PanelApplicant class.
social_media = string_list(default=list())

# This limits how many applications someone can submit via the guest checklist.
# Set this to 0 to remove limits from guest panel applications.
app_limit = integer(default=3)


# =============================
# tabletop
# =============================

tabletop_locations = string_list(default=list())

# If we're in dev_box mode then we'll ONLY send messages to phone numbers in
# this list.  In production this list does nothing.
testing_phone_numbers = string_list(default=list())


# =============================
# guests
# =============================

rock_island_email = string(default="MAGFest Rock Island <rockisland-heads@magfest.org>")

band_email = string(default="MAGFest Music Department <music@magfest.org>")
band_email_signature = string(default="- MAGFest Music Department")

require_dedicated_guest_table_presence = boolean(default=True)
rock_island_groups = string_list(default=list(''))

allowed_w9_extensions = string_list(default=list("pdf", "png", "gif", "jpg", "jpeg", "doc", "docx"))
allowed_bio_pic_extensions = string_list(default=list("png", "gif", "jpg", "jpeg"))
allowed_inventory_image_extensions = string_list(default=list("png", "gif", "jpg", "jpeg"))
allowed_inventory_audio_extensions = string_list(default=list("mp3", "m4a", "wav"))
allowed_stage_plot_extensions = string_list(default=list("zip", "pdf", "png", "gif", "jpg", "jpeg", "doc", "docx"))

default_loadin_minutes = integer(default=20)
default_performance_minutes = integer(default=40)

# Vague description of when guests should expect to hear back about their
# rehearsal space, e.g. "the end of October" or "the middle of August".
expected_rehearsal_response = string(default='December 15')


# =============================
# art show
# =============================
art_show_rules_url = string(default="")

# Changes the term used to refer to art show apps
art_show_app_term = string(default="application")
qs_price_term = string(default="quick sale price")

cost_per_panel = integer(default=5)
cost_per_table = integer(default=5)

# The max panels and tables settings apply to each gallery separately.
max_art_panels = integer(default=4)
max_art_tables = integer(default=4)

art_mailing_fee = integer(default=5)
piece_name_length = integer(default=50)

# Enter as a hundredths of a percent
# For example, use 1000 for a sales tax of 10%.
sales_tax = integer(default=1025)

# Enter as a hundredths of a percent
# This is printed on the artist invoice and in some reports
commission_pct = integer(default=1000)

# An option for events running just the art show plugin without using the registration system.
# Badges are created for applicants in the "Not Attending" status, which removes requirements
# for filling out information and prevents them from receiving attendee-related automated emails.
independent_art_show = boolean(default=False)

# Requires applicants to check a box verifying their
# mail-in address will be in the continental US
by_mail_us_only = boolean(default=True)

# If turned off, artists will be able to generate and assign multiple
# art show agent codes. Otherwise, they can only cancel and regenerate codes.
one_agent_per_app = boolean(default=True)

# These are used as templates to generate social media links, in case a
# panelist provides a username instead of a direct link to their social media
# page. The keys should match "fieldified" values in the "social_media" list.
[social_media_urls]

# These are used as placeholder values on HTML forms generated for the fields
# in the "social_media" list. The keys should match "fieldified" values in the
# "social_media" list.
[social_media_placeholders]

[cherrypy]
checker.check_skipped_app_config = boolean(default=False)

engine.autoreload.on = boolean(default=False)

server.socket_host = string(default="127.0.0.1")
server.socket_port = integer(default=80)
server.thread_pool = integer(default=10)

tools.sessions.on = boolean(default=True)
tools.sessions.path = string(default="/")
tools.sessions.timeout = integer(default=60)
tools.sessions.storage_type = string(default="file")
tools.sessions.storage_path = string(default="%(root)s/data/sessions")
tools.sessions.secure = boolean(default=False)
tools.sessions.prefix = string(default=uber)

# RedisSession specific values
tools.sessions.host = string(default="127.0.0.1")
tools.sessions.port = integer(default=6379)
tools.sessions.db = integer(default=0)
tools.sessions.password = string(default=None)
tools.sessions.tls_skip_verify = boolean(default=False)
tools.sessions.is_sentinel = boolean(default=False)
tools.sessions.ssl = boolean(default=False)
tools.sessions.user = string(default="")

# Built-in CherryPy web server stats page
tools.cpstats.on = boolean(default=False)

[secret]
# Config options in this section are accessible as normal through the global
# config object, but are not rendered as Javascript variables and sent to the
# user's web browser.  Put options in this section you would never want being
# public such as email crendtials and lists of banned attendees.

# Settings for using AWS' secrets fetching feature
aws_secret_service_name = string(default="")

aws_signnow_secret_name = string(default="")
aws_auth0_secret_name = string(default="")

# Configuration for AWS email sending and secrets fetching feature
aws_region = string(default="us-east-1")
# Just the email region, if it's different than the secrets fetching region
aws_region_email = string(default="us-east-1")

# Link to a secure document portal for guest groups to upload sensitive documents to.
secure_document_url = string(default='')

# If this is set, dealers must access the dealer registration using this code in the URL
# I.e., /preregistration/dealer_registration?invite_code={DEALER_INVITE_CODE}
dealer_invite_code = string(default="")

# If maps_enabled is true, this key will be used to actually render the map.
google_maps_api_key = string(default="")

# The variables below are for SignNow, which we use in some cases for embedded
# signing. Right now the only document signing is for dealers, so a lot of this
# is still fairly hard-coded until we have a better idea of if/when we need this
# for other things. Maybe SignNow's API will improve in the meantime.
signnow_env = string(default='eval') # Set to "production" for your prod servers
signnow_dealer_template_id = string(default='')
signnow_dealer_folder_id = string(default='') # If set, new documents are moved to this folder before signing

signnow_client_id = string(default='')
signnow_client_secret = string(default='')

signnow_access_token = string(default='')

# Username/password is the officially support auth method for SignNow
# But that's dumb so these are only used if dev_box is set to true
signnow_username = string(default='')
signnow_password = string(default='')

# Used to connect to our celery task queue broker, for example RabbitMQ
broker_url = string(default="amqp://localhost//")

# Configure a prefix for the celery task queue broker to support multitenancy
broker_prefix = string(default="uber")

# Used to connect to our Postgres database.
sqlalchemy_url = string(default="postgresql://db_user:db_password@localhost:5432/db_name")

# Setting these to a value of -1 indicates that they won't be used when
# constructing the SQLAlchemy session. For example, the SQLite DB engine
# doesn't support these options, so they should be set to -1 for SQLite
# connections.
sqlalchemy_pool_size = integer(default=5)
sqlalchemy_max_overflow = integer(default=10)

# These are test values which are safe for everyone to use and safe to check
# into source control; Stripe specifically designs their test credentials with
# this purpose in mind.  You can enter any of Stripe's test credit card numbers
# and have them work, e.g. you can use the number 4242 4242 4242 4242 which will
# always be valid with any expiration date and security code.
stripe_secret_key = string(default="sk_test_QHnlImUs68dQFxgTfVauz5Ue")
stripe_public_key = string(default="pk_test_q4kSJVwk6LXKv2ahxuVn7VOK")

# This is for the payment completion webhook; it will change for each Stripe account
# You can forward Stripe events to a local server using the Stripe CLI:
# https://stripe.com/docs/webhooks/test
stripe_endpoint_secret = string(default="")

# These are credentials for Authorize.net; if they are filled in, Stripe credentials are ignored
authorizenet_login_id = string(default="")
authorizenet_login_key = string(default="")
authorizenet_public_key = string(default="")

# SPIn auth info
spin_terminal_auth_key = string(default="")
spin_terminal_url = string(default="")

# The default threshold, in cents, that we tell payment terminals to always capture a signature
spin_terminal_signature_threshold = integer(default=20000)

# Authorize.net uses different API endpoints for sandbox and production
authorizenet_endpoint = string(default="https://apitest.authorize.net/xml/v1/request.api")

# Configuration for SAML/SSO authentication for admin accounts.
# If these are not set, authentication is done in-app instead.
auth_domain = string(default="")
auth_client_id = string(default="")
auth_client_secret = string(default="")

# This list is checked when attendeees preregister and sign up as volunteers.
# You should enter the full names including all common nicknames as separate
# entries, e.g. if you banned "John Smith" then you should make sure to also
# include "Jonathan Smith" and "Johnny Smith" in the list.
banned_staffers = string_list(default=list())

# Turn SEND_EMAILS on and set our AWS keys to allow emails to be sent.  Note
# that if the DEV_BOX setting is True, emails will show up in the database as if
# they were sent (and those emails will be logged), but no emails will be sent
# except to the DEVELOPER_EMAIL address and to any "mailinator.com" address.  So
# this is safe to turn on even in development.
#
# When turning this on in production, you'll need to enable all of of the email
# addresses below which send emails (ADMIN_EMAIL, REGDESK_EMAIL, STAFF_EMAIL,
# MARKETPLACE_EMAIL, and PANELS_EMAIL) in your AWS account or else those emails
# will not be sent.
#
# DO NOT EVER check our AWS keys into source control!  If you want to actually
# send real emails to yourself and mailinator.com addresses in development, set
# these values in your development.ini file, which is NOT checked in.
#
aws_access_key = string(default="")
aws_secret_key = string(default="")

# This is the secret link that will be emailed to any attendee that requested
# hotel booking info during preregistration.
# NOTE: because this link should be kept secret, it should NEVER be checked
# into github. The default listed here is merely a placeholder.
prereg_hotel_info_link = string(default='http://magfest.org/bookhotel/')

# A secret 10-digit key used to encrypt/decrypt barcodes.
# KEEP THIS SAFE, SHARE WITH NO-ONE.
barcode_key = string(default="")

# A secret numeric salt value used to encrypt/decrypt barcodes.
# KEEP THIS SAFE, SHARE WITH NO-ONE.
# pick a random number between 0 and max of 1,000,000 (don't go over)
barcode_salt = integer(default=0)

# A 1-byte event-ID number embedded in each barcode that tells us what event
# this came from.
barcode_event_id = integer(default=0)

# Twilio account used for panels/attractions notifications
panels_twilio_sid = string(default="")
panels_twilio_token = string(default="")

# The email address that is used by /accounts/insert_test_admin
test_admin_email = string(default="magfest@example.com")

# In some deployment setups, SAML Auth will be unable to detect HTTPS properly
# Setting this to True will force SAML to use HTTPS
force_saml_https = boolean(default=False)

# A structure dict for SAML IdP settings that is used as-is
[[saml_idp_settings]]
entityId = string(default="")
x509cert = string(default="")

[[[singleSignOnService]]]
url = string(default="")
binding = string(default="")

[[[security]]]
authnRequestsSigned = string(default="")

# Most of our SAML SP settings are set in config.py, these variables are added onto that
[[saml_sp_settings]]
x509cert = string(default="")
privateKey = string(default="")

[[terminal_ids]]

[data_dirs]
# Directories on the server filesystem where uploaded files are saved
uploaded_files_dir = string(default="%(root)s/uploaded_files")
guests_bio_pics_dir = string(default="%(uploaded_files_dir)s/guests_bio_pics")
guests_w9_forms_dir = string(default="%(uploaded_files_dir)s/guests_w9_forms")
guests_stage_plots_dir = string(default="%(uploaded_files_dir)s/guests_stage_plots")
guests_inventory_dir = string(default="%(uploaded_files_dir)s/guests_inventory")
mivs_game_image_dir = string(default="%(uploaded_files_dir)s/mivs_game_images")
mits_picture_dir = string(default="%(uploaded_files_dir)s/mits_game_images")


[dates]
# Dates controlling when different site features and emails are turned on and off.  Features
# can be turned off by setting these values to the empty string.  For example, you can turn
# off Dealer registration completely by setting all of the dealer dates to the empty string.
#
# Settings in this section are automatically converted to global variable datetime objects,
# locatized to the timezone specified in the above EVENT_TIMEZONE setting.
#
# Dates are in YYYY-MM-DD format. Time may also be specified by using YYYY-MM-DD HH. If a
# time is not specified, the system defaults to YYYY-MM-DD 11:59pm in the event's timezone.

# Prereg pages will automatically start letting people preregister on this day.
prereg_open = string(default="2014-08-08")

# The cut-off for badges that must be registered to be included in the hotel PIN export.
prereg_hotel_eligibility_cutoff = string(default="2024-10-10")

# Emails to volunteers to complete their checklist will be sent on this date,
# and volunteers will not be able to log in until this date. Leave this empty
# if you don't want to use the volunteer checklist for this event.
# Uses shifts_created as default for backwards compatibility.
volunteer_checklist_open = string(default="%(shifts_created)s")

# Volunteers will be able to view shifts after this date.
shifts_created = string(default="")

# Dealer registration automatically opens on DEALER_REG_START. After DEALER_REG_DEADLINE
# all dealer registration are automatically waitlisted. After DEALER_REG_SHUTDOWN dealers
# can no longer even add themselves to the waitlist. Dealer payment reminder emails are
# sent in the days and weeks leading up to DEALER_PAYMENT_DUE.
#
# If dealers get their badges converted to individual badges when declined, these badges
# will be invalidated after DEALER_BADGE_DEADLINE, if it is set.
#
# Leaving all of these blank will completely turn off dealer registration for your event.
#
dealer_reg_start       = string(default="")
dealer_reg_deadline    = string(default="")
dealer_reg_shutdown    = string(default="")
dealer_payment_due     = string(default="")
dealer_badge_deadline  = string(default="")

# These are similar to the dealer dates, but for Marketplace applications.
marketplace_reg_start       = string(default="")
marketplace_waitlist    = string(default="")
marketplace_deadline    = string(default="")
marketplace_payment_due     = string(default="")

# These are similar to the dealer dates, but for Art Show applications.
art_show_reg_start = string(default="2017-01-01")
art_show_waitlist = string(default="")
art_show_deadline = string(default="2017-10-10")
art_show_payment_due = string(default="2017-10-10")

# This is ignored if Supporter registrations are turned off (which happens implicitly if
# the SUPPORTER_LEVEL value is higher than any of the donation tiers), but if Supporter
# registration is enabled, all donation tiers at SUPPORTER_LEVEL and higher can no longer
# be selected by attendees starting on this date.
supporter_deadline = string(default="")

# The date at which donation tiers at SHIRT_LEVEL and higher but below
# SUPPORTER_LEVEL can no longer be selected by attendees.
shirt_deadline = string(default="")

# The deadline after which staffers may no longer toggle whether they want an
# event shirt or multiple staff shirts.
volunteer_shirt_deadline = string(default="")

# If printed badges are enabled (in other words, if PREASSIGNED_BADGE_TYPES is not an
# empty list), this is the date by which attendees must enter what they want printed
# on their badge; after this date we lock in whatever they entered or their full name
# if they didn't provide anything. This also controls when admins can no longer
# edit badge numbers freely, assuming shift_custom_badges is True.
printed_badge_deadline = string(default="2015-12-26")

# Many MAGFest events print custom supporter badges later than other custom badge types
# due to the lower number of supporters vs staff. Attendees with supporter badges
# can edit their badge names up to this or printed_badge_deadline, whichever is later.
supporter_badge_deadline = string(default="%(supporter_deadline)s")

# Users can no longer create groups after this date, though admins can. Set this
# blank to keep the group registration open through the event's end date (eschaton).
group_prereg_takedown = string(default="%(eschaton)s")

# Even after preregistration goes offline, we still allow people with placeholder
# registrations to fill out the form to claim their badge until this date, after which
# we usually just delete the unclaimed badges (as our emails warn that we'll do),
# although this is a manual process.
placeholder_deadline  = string(default="%(epoch)s")

# New preregistrations can no longer be made after this date, but all other features will
# continue to work, such as badge transfers, group management, and shift signup. Set this
# blank to keep the preregistration page open through the event's end date (eschaton).
prereg_takedown = string(default="%(eschaton)s")

# Attendees with single paid badges may self-service refund their badge after this date.
# Leave this blank to allow refunds until refund_cutoff (below), if refund_cutoff is set.
refund_start = string(default="")

# Before this date, attendees with single paid badges may self-service refund their badge.
# Leave this blank to disable self-service refunds.
# See exclude_fees_from_refunds for setting whether these refunds include processing fees.
refund_cutoff = string(default="")

# All parts of the site go offline after this date (which is also used in several emails).
# Volunteers will be able to log in to check and print out their hours but will not be
# able to edit them after this happens.
uber_takedown = string(default="%(eschaton)s")

# On the last day of an event, we usually let people in for free when it's so close to
# the end of the day that it would be silly to charge someone for e.g. an hour or two.
# Badges registered through the at-the-door registration form after this time will
# automatically be marked as "need not pay".
badge_price_waived = string(default="")

epoch    = string(default="2018-01-23 08")
eschaton = string(default="2018-01-26 18")

# Deadlines for the MAGFest Indie Videogame Showcase
mivs_start = string(default="2015-11-01")
mivs_deadline = string(default="2015-11-30")
mivs_judging_deadline = string(default="2016-01-03")
mivs_results_reveal = string(default="2016-01-09")

# This is the date by which MAGFest Indie Tabletop Showcase teams need to submit their applications.
mits_submission_deadline = string(default="2017-11-07")

# MITS Teams can edit their applications even after submitting it until this deadline.
mits_editing_deadline = string(default="2017-11-30")

# Open date and deadline for panel applications
panels_start = string(default="")
panels_deadline = string(default="")

# The start and end time for the panels schedule
panels_epoch = string(default='%(epoch)s')
panels_eschaton = string(default='%(eschaton)s')


# Add deadlines to enable certain checklist steps for certain group types
# For example, band_panel_deadline enables the panel step for the band group type
auction_start = string(default="2016-02-21 11")
band_panel_deadline = string(default="2015-12-20")
band_bio_deadline = string(default="2016-01-03")
band_info_deadline = string(default="2016-01-17")
band_taxes_deadline = string(default="2016-01-17")
band_merch_deadline = string(default="2016-01-31")
band_charity_deadline = string(default="2016-01-31")
band_badges_deadline = string(default="2016-02-07")
band_stage_plot_deadline = string(default="2016-02-07")
guest_bio_deadline = string(default="2017-10-15")
guest_info_deadline = string(default="2017-11-01")
rock_island_deadline = string(default="2017-11-30")
guest_travel_plans_deadline = string(default="2017-11-01")

__many__ = string

# Room deadline for hotel requests
room_deadline = string(default='')

# Date after which staffers cannot drop their own shifts
drop_shifts_deadline = string(default='')

# Hotel lottery dates
# The first day you can request to check in
hotel_lottery_checkin_start = string(default='%(epoch)s')
# The last day you can request to check in
hotel_lottery_checkin_end = string(default='%(eschaton)s')
# The first day you can request to check out
hotel_lottery_checkout_start = string(default='%(epoch)s')
# The last day you can request to check out
hotel_lottery_checkout_end = string(default='%(eschaton)s')

# The last day you can cancel a suite (display-only)
hotel_lottery_suite_cutoff = string(default="")

# Open and close dates of the lottery form
hotel_lottery_form_start = string(default="")
hotel_lottery_form_deadline = string(default="")
hotel_lottery_staff_start = string(default="%(hotel_lottery_form_start)s")
hotel_lottery_staff_deadline = string(default="%(hotel_lottery_form_deadline)s")

[hotel_lottery]
[[hotels]]
[[[__many__]]]
name = string(default="Sample Hotel")
export_name = string(default="")
price = string(default="")
staff_price = string(default="")
description = string(default="")
description_right = string(default="")
footnote = string(default="")
[[room_types]]
[[[__many__]]]
name = string(default="Normal Room")
export_name = string(default="")
price = string(default="")
staff_price = string(default="")
description = string(default="")
description_right = string(default="")
footnote = string(default="")
[[suite_room_types]]
[[[__many__]]]
name = string(default="Normal Suite")
export_name = string(default="")
price = string(default="")
staff_price = string(default="")
description = string(default="")
description_right = string(default="")
footnote = string(default="")

[[priorities]]
[[[hotel]]]
name = string(default="Hotel")
export_name = string(default="")

[[[dates]]]
name = string(default="Dates")
export_name = string(default="")

[[[room]]]
name = string(default="Room Type")
export_name = string(default="")

[[[__many__]]]
name = string(default="")
price = string(default="")
staff_price = string(default="")
description = string(default="")
description_right = string(default="")
footnote = string(default="")


[badge_type_prices]
# Add badge types here to make them attendee-facing badges. They will be displayed
# on the pre-reg form and may be purchased by attendees. These badge types will
# function much like Attendee badges, although they cannot have price bumps.
__many__ = integer


[badge_prices]
# These settings (but not in subsections) are also exported as global constants.

# Set this to False to turn off single-day passes for your event.
one_days_enabled = boolean(default=True)

# There are two ways events typically handle single-day passes.  Either you must
# purchase the pass on the day you use it, or you can pre-purchase a single day
# pass for a future day.  If this is set to true, a new badge type is created for
# each day from c.EPOCH to c.ESCHATON.  For example, if your event runs from
# Friday through Sunday, you will end up with c.FRIDAY, c.SATURDAY, and c.SUNDAY
# badge types.  The c.ONE_DAY_BADGE type still exists, and admins can use it to
# create single day passes which can be redeemed on any day.
#
# This option does nothing if c.ONE_DAYS_ENABLED is set to False.
#
presell_one_days = boolean(default=True)

# We support different single day badge prices on different days.  This is the
# default price, which may be overridden in the [[single_day]] section below.
default_single_day = integer(default=40)

# Our attendee price starts at this amount, and then goes up on all of the dates
# you specify in the [[attendee]] section below.
initial_attendee = integer(default=40)

# Set this to False to turn off price increases over time and just always have
# your attendee badges cost the INITIAL_ATTENDEE price specified above.
price_bumps_enabled = boolean(default=True)

# Group badge prices always equal the attendee badge prices minus this discount.
group_discount = integer(default=10)

# Dealer badge prices always cost this amount and don't change over time.
dealer_badge_price = integer(default=30)

[[single_day]]
# Set (capitalized) day names equal to their overriden prices in this section.
# For example, you could say "Thursday = 20" to make Thursday single-day badges
# only cost 20, overridding the the DEFAULT_SINGLE_DAY price above.
__many__ = integer

[[attendee]]
# Set dates equal to the price as of that date. For example, you could say
# "2014-10-01 = 45" to have the price go up to $45 on October 1st.
# You can also set a badge cap for a price, e.g., "5000 = 50" will raise
# the badge price to $50 once 5000 badges are sold.
__many__ = integer

[[stocks]]
# Use this to set limits on how many copies of each badge can be sold, e.g.
# if you only have 200 Friday badges you'd say "friday = 200".  Although you
# can list arbitrary things here, the intention is for options in this section
# to correspond to badge types.
# We shut down ALL badge sales if attendee badges run out, so this is the event cap.
attendee_badge = integer(default=20000)
__many__ = integer


[table_prices]
default_price = integer(default=100)
__many__ = integer


[badge_ranges]
# Set each badge type to the min and max badge numbers for those badges.  For
# example, you'd say "attendee = 1, 1000" to indicate that attendee badge
# numbers start at 1 and end at 1000.
staff_badge = int_list(default=list(1,1000))
guest_badge = int_list(default=list(1,1000))
contractor_badge = int_list(default=list(1,1000))
attendee_badge = int_list(default=list(1,1000))
one_day_badge = int_list(default=list(1,1000))
__many__ = int_list(min=2, max=2)


[age_groups]

[[age_unknown]]
desc            = string(default="age unknown")
wristband_color = string(default="")
discount        = integer(default=0)
can_register    = boolean(default=True)
can_volunteer   = boolean(default=True)
consent_form    = boolean(default=False)

[[under_18]]
desc            = string(default="Under 18")
min_age         = integer(default=0)
max_age         = integer(default=17)
wristband_color = string(default="red")
discount        = integer(default=0)
can_register    = boolean(default=True)
can_volunteer   = boolean(default=False)
consent_form    = boolean(default=True)

[[18_up]]
desc            = string(default="18 and older")
min_age         = integer(default=18)
max_age         = integer(default=120)
wristband_color = string(default="green")
discount        = integer(default=0)
can_register    = boolean(default=True)
can_volunteer   = boolean(default=True)
consent_form    = boolean(default=False)

[[__many__]]
desc            = string
min_age         = integer
max_age         = integer
wristband_color = string(default="")
discount        = integer(default=0)
can_register    = boolean(default=True)
can_volunteer   = boolean(default=True)
consent_form    = boolean(default=False)


[donation_tier_descriptions]
# Sometimes the items in the [[donation_tier]] subsection of [integer_enums]
# need extra information beyond just the amount and name of the donation level.
# The two fields with semantic meaning to our merch booth are the "description"
# and "items" fields.  When someone comes to collect their merch, it's useful to
# not just say the donation level (e.g. "Supporter Pack") but to individually
# list the items.  This helps prevent new volunteers from accidentally failing
# to give out all of the items in the pack.
#
# The subsection names here can be anything; the "name" field is used to map
# each subsection to the donation tier.  For example, if we had the following
# donation tiers:
#   [integer_enums]
#   [[donation_tier]]
#   "No thanks" = 0
#   "Have some money" = 10
#   "Shirt" = SHIRT_LEVEL
#   "Supporter Pack" = SUPPORTER_LEVEL
#
# We might see the following tier descriptions:
#   [donation_tier_descriptions]
#   [[minimum_kickin]]
#   name = "Have some money"
#   description = "Our Gratitude|Cool Throw-ins"
#   merch_items = "Friend of the Event Ribbon", "Sticker Pack"
#   [[supporter]]
#   name = "Supporter Pack"
#   description = "Supporter Bag|Custom Poncho"
#
# The "description" field is a "|"-separated list (TODO: replace this with an
# actual list).  We split this and use it to show which merch items should be
# distributed, unless the "merch_items" field is set, in which case we use that.
# The reason these are separate is because sometimes the description might
# contain things that we don't physically hand out at the merch booth.
#
# In addition to everything described above, event-specific plugins can place
# additional information here to power custom Javascript on their registration
# page.  For example, the "magprime" plugin adds "icon" and "link" fields to
# each subsection.
[[__many__]]
name = string(default="")
description = string(default="")
merch_items = force_list(default=list())


[integer_enums]
shirt_level     = integer(default=20)
supporter_level = integer(default=60)
season_level = integer(default=100)
size_unknown = integer(default=-1)
no_shirt     = integer(default=0)
__many__ = integer

# These sections need to exist but can stay empty for events which are not using
# the features they represent.
[[shirt]]
'Please select a size' = integer(default=0)
[[shirt_stock]]
[[staff_shirt]]
'Please select a size' = integer(default=0)
[[prereg_shirt]] # If this is blank, we just use [[shirt]], otherwise we only show these for pre-order
[[staff_event_shirt]]
[[donation_tier]]
'No thanks' = integer(default=0)

[[store_price]]
[[fee_price]]

[[___many___]]
__many__ = string


[enums]
# This section is for defining option sets which are used for dropdowns and
# checkbox groups.  Every sub-section will be turned into two global constants;
# a list of key/value tuples and a dictionary.  The former will have the "opts"
# suffix and the latter will have an "s" appended if it doesn't already end with
# one.  For example, the [[badge]] subsection will generate a BADGE_OPTS list
# and a BADGES dictionary, and the [[access]] subsection will generate ACCESS
# and ACCESS_OPTS, etc.
#
# All of the options in each subsection will become integer global contants
# which will be the values used to store these fields in the database and to
# otherwise identify these values in the code.  The string values are used for
# displaying these values to users; see the {{ options() }} tag and the _label
# properties for how to use these.
#
# Some of the subsections have values defined here, because it would break our
# code to have any of their options removed.  For example, we MUST have an
# ATTENDEE_BADGE option, though you can override the display text.  You can
# also add new option to those sections, e.g. new badge types and ribbons.  In
# theory you can also REMOVE items which are already defined here by setting
# their description value to the empty string.  You should only do this if
# you're really sure that you know what you're doing, since removing options
# which the core system relies upon could cause all kinds of problems.

[[badge]]
attendee_badge  = string(default="Attendee")
staff_badge     = string(default="Staff")
contractor_badge = string(default="Contractor")
guest_badge     = string(default="Guest")
one_day_badge   = string(default="One Day")
# Child badges are automatically given to anyone under 18.
# Anyone under 13 also gets a half-price discount,
# with a corresponding badge selection on the prereg page.
#
# To remove the button and auto-assigning for this badge and the corresponding
# under 13 ribbon, override PREREG_BADGE_TYPES in config.py.
#
# To remove the age-related discount, redefine discountable_badge_types without child_badge.
child_badge = string(default="Minor")
__many__ = string

[[badge_status]]
pending_status = string(default="Pending")
imported_status = string(default="Imported")
new_status = string(default="New")
completed_status = string(default="Complete")
invalid_status = string(default="Invalid")
refunded_status = string(default="Refunded/Cancelled")
deferred_status = string(default="Deferred")
watched_status = string(default="On Hold")
not_attending = string(default="Not Attending")
invalid_group_status = string(default="Group Invalid")
unapproved_dealer_status = string(default="Unapproved Dealer")

[[ribbon]]
volunteer_ribbon = string(default="Volunteer")
dept_head_ribbon = string(default="Department Head")
dealer_ribbon    = string(default="Shopkeep")
panelist_ribbon  = string(default="Panelist")
under_13 = string(default="12 & Under")
band = string(default="RockStar")
mivs = string(default="Indie Dev")
__many__ = string

[[payment]]
not_paid      = string(default="no")
has_paid      = string(default="yes")
need_not_pay  = string(default="doesn't need to")
refunded      = string(default="paid and refunded")
paid_by_group = string(default="paid by group")
pending = string(default="pending")
lost_badge    = string(default="lost badge")
__many__ = string

[[pronoun]]
she = string(default="She/Her")
he = string(default="He/Him")
they = string(default="They/Them")

[[api_access]]
api_create  = string(default="Create")
api_read    = string(default="Read")
api_update  = string(default="Update")
api_delete  = string(default="Delete")

[[worked_status]]
shift_unmarked = string(default="SELECT A STATUS")
shift_worked   = string(default="This shift was worked")
shift_unworked = string(default="Staffer didn't show up")

[[rating]]
unrated     = string(default="Shift Unrated")
rated_bad   = string(default="Staffer performed poorly")
rated_good  = string(default="Staffer performed well")
rated_great = string(default="Staffer went above and beyond")

[[wristband_color]]
default_wristband = string(default="red")
__many__ = string

[[shirt_opt_out]]
opt_in = string(default="I would like a staff shirt for this year!")
staff_opt_out = string(default="I would like to opt out of receiving my staff shirt.")
event_opt_out = string(default="I would like to opt out of receiving my free shirt for volunteering.")
all_opt_out = string(default="I would like to opt out of ANY free shirts.")

[[tracking]]
created = string(default="created")
updated = string(default="updated")
deleted = string(default="deleted")
unpaid_prereg = string(default="unpaid preregistration")
edited_prereg = string(default="edited_unpaid_prereg")
item_added = string(default="item added")
item_removed = string(default="item removed")

[[access]]
none = string(default="None")
limited = string(default="Limited")
contact = string(default="Contact Info")
dept = string(default="All Info in Own Dept(s)")
full = string(default="All Info")

[[food_restriction]]
vegan      = string(default="Vegan")

[[sandwich]]

[[dealer_status]]
imported = string(default="Imported")
unapproved = string(default="Pending Approval")
waitlisted = string(default="Waitlisted")
approved   = string(default="Approved")
declined   = string(default="Declined")
cancelled  = string(default="Cancelled")
shared    = string(default="Shared")

[[marketplace_status]]
pending = string(default="Pending")
accepted   = string(default="Accepted")
waitlisted = string(default="Waitlisted")
declined   = string(default="Declined")
cancelled  = string(default="Cancelled")

[[hotel_lottery_status]]
partial = string(default="Partial")
complete = string(default="Complete")
disqualified = string(default="Disqualified")
withdrawn = string(default="Withdrawn")
processed = string(default="Processed")

[[hotel_lottery_entry_type]]
room_entry = string(default="Room")
suite_entry = string(default="Suite")
group_entry = string(default="Roommate")

[[night]]
monday    = string(default="Monday")
tuesday   = string(default="Tuesday")
wednesday = string(default="Wednesday")
thursday  = string(default="Thursday")
friday    = string(default="Friday")
saturday  = string(default="Saturday")
sunday    = string(default="Sunday")

[[job_type]]
regular  = string(default="Regular")
setup    = string(default="Setup")
teardown = string(default="Teardown")

[[dealer_wares]]
other = string(default="Other (Please Specify)")
__many__ = string


# NO LONGER USED.
#
# The attendee_tournaments module is no longer used, but has been
# included for backward compatibility with legacy servers.
[[tournament_status]]
new = string(default="New")
accepted = string(default="Accepted")
declined = string(default="Declined")


[[mivs_indie_access_level]]
indie_judge = string(default="Indie Judge")
indie_admin = string(default="Indie Admin")

[[mivs_indie_genre]]
action = string(default="Action")
adventure = string(default="Adventure")
horror = string(default="Horror")
party = string(default="Party")
puzzle = string(default="Puzzle")
racing = string(default="Racing")
rpg = string(default="RPG")
rts = string(default="RTS")
shooter = string(default="Shooter")
sports = string(default="Sports")
tbs = string(default="TBS")

[[mivs_indie_platform]]
xbox1 = string(default="Xbox One")
ps4 = string(default="Playstation 4")
switch = string(default="Nintendo Switch")
pc = string(default="PC")
pcgamepad = string(default="PC using a gamepad")
android = string(default="Android")
ios = string(default="iOS")
vr = string(default="VR/AR")

[[mivs_studio_status]]
new = string(default="new")
accepted = string(default="accepted")
waitlisted = string(default="waitlisted")
declined = string(default="declined")
banned = string(default="banned")

[[mivs_judge_status]]
unconfirmed = string(default="Unconfirmed")
confirmed = string(default="Yes")
next_year = string(default="Maybe Next Year")
cancelled = string(default="Asked for Removal")
disqualified = string(default="Disqualified")

[[mivs_video_review_status]]
pending = string(default="not reviewed yet")
video_reviewed = string(default="video reviewed")
bad_link = string(default="bad link")

[[mivs_game_review_status]]
pending = string(default="not reviewed yet")
playable = string(default="game could be played")
broken = string(default="game was broken")
could_not_play = string(default="I could not play the game, but it was not broken")
bad_link = string(default="bad link")
bad_code = string(default="bad activation code")

[[mivs_code_type]]
no_code = string(default="Game Doesn't Require Activation Codes")
password = string(default="Game Requires a Password to Play")
custom = string(default="Game Requires a Custom Code to Play")
steam = string(default="Game Requires a Steam Code to Play")

[[mivs_build_status]]
pre_alpha = string(default="Pre-alpha")
alpha = string(default="Alpha")
beta = string(default="Beta")
rc = string(default="Release Candidate")
release = string(default="Release")

[[mivs_game_status]]
new = string(default="pending")
declined = string(default="declined")
waitlisted = string(default="waitlisted")
accepted = string(default="accepted")
cancelled = string(default="studio backed out")



[[mits_app_status]]
pending = string(default="Pending")
waitlisted = string(default="Waitlisted")
declined = string(default="Declined")
accepted = string(default="Accepted")
cancelled = string(default="Cancelled")

[[mits_age]]
child = string(default="Children")
teen = string(default="Teens")
mature = string(default="Mature")
adult = string(default="Adults")
family = string(default="Families")

[[mits_age_description]]
child = string(default="Appropriate for children")
teen = string(default="Appropriate for teens")
mature = string(default="Appropriate for a mature audience")
adult = string(default="Appropriate for adults")
family = string(default="Appropriate for families")

[[mits_copyright]]
yes = string(default="Yes")
no = string(default="No")

[[mits_phase]]
development = string(default="Development")
prototype = string(default="Playable Prototype")
testing = string(default="Testing")
near_completion = string(default="Near Completion")
post_prod = string(default="Post-Production Advertising")

[[mits_contact]]
texting = string(default="Text message")
calling = string(default="Phone call")

[[mits_room_night]]
thursday = string(default="Thursday night")
friday = string(default="Friday night")
saturday = string(default="Saturday Night")

[[mits_schedule]]
thursday_afternoon = string(default="Thursday 2pm")
thursday_evening = string(default="Thursday 4pm")
thursday_night = string(default="Thursday 6pm")
thursday_late = string(default="Thursday 8pm")
friday_afternoon = string(default="Friday 2pm")
friday_evening = string(default="Friday 4pm")
friday_night = string(default="Friday 6pm")
friday_late = string(default="Friday 8pm")
saturday_afternoon = string(default="Saturday 2pm")
saturday_evening = string(default="Saturday 4pm")
saturday_night = string(default="Saturday 6pm")
saturday_late = string(default="Saturday 8pm")

[[mits_showcase_schedule]]
friday_afternoon = string(default="Friday 1pm")
friday_evening = string(default="Friday 3pm")
friday_night = string(default="Friday 5pm")
friday_late = string(default="Friday 7pm")
saturday_afternoon = string(default="Saturday 1pm")
saturday_evening = string(default="Saturday 3pm")
saturday_night = string(default="Saturday 5pm")
saturday_late = string(default="Saturday 7pm")

[[communication_pref]]
email = string(default="Email")
sms = string(default="Text/SMS")
phone_call = string(default="Phone Call")

[[panel_length]]
sixty_min = string(default="60 Minutes")
ninety_min = string(default="90 Minutes")
other = string(default="Other (Please Specify)")

[[tech_need]]
projector = string(default="A Projector")
microphone = string(default="A Microphone")
apple2vga = string(default="Apple Video Adaptor")
hdmi_adaptor = string(default="HDMI Adaptor")
rca_adaptor = string(default="Composite (RCA) Video Adaptor")
sound_system = string(default="A Full Range Sound System")
dvd_player = string(default="DVD Player")
document_camera = string(default="Overhead Document Camera")
network = string(default="Internet Connectivity")
custom_av = string(default="Custom A/V Setup")

[[panel_dept]]
panels = string(default="Panels")

[[panel_rating]]
unrated = string(default="Select a content rating")

[[panel_content]]
none = string(default="None; this content is appropriate for all ages")

[[noise_level]]
level_0 = string(default="Level 0 (Just talking to the audience)")

[[presentation]]
qa = string(default="Mostly just Question and Answer")
group_discussion = string(default="Group Discussion with Moderator")
basic = string(default="Basic presentation with some Q&A")
advanced_av = string(default="Presentation requiring advanced A/V")
workshop = string(default="Workshop or Tech/Interactive Demo")
movie = string(default="Media presentation (like a movie)")
performance = string(default="Scripted or Improv Live Performance")
participation = string(default="Audience participation (like a game)")
other = string(default="Other")

[[livestream]]
opt_in = string(default="It's fine to record or livestream this panel")
opt_out = string(default="Please don't record or livestream this panel")

[[panel_app_status]]
pending = string(default="Pending")
accepted = string(default="Accepted")
declined = string(default="Declined")
waitlisted = string(default="Waitlisted")
cancelled = string(default="Cancelled")

[[panel_feedback]]
unrated = string(default="No rating")
confused = string(default=":? (I don't even)")
horrible = string(default="D: (horrible)")
bad = string(default=":( (bad or not good)")
meh = string(default=":| (meh)")
good = string(default=":) (good)")
awesome = string(default=":D (awesome)")


[[group_type]]
# These are used to generate and check for specific deadlines and templates
band = string(default="Band")
guest = string(default="Guest")
mivs = string(default="MIVS")
rock_island = string(default="Rock Island")

[[guest_access_level]]
bands = string(default="Guest Group Management")

[[guest_merch]]
no_merch = string(default="Not selling merch")
own_table = string(default="Dedicated table")
rock_island = string(default="")

[[guest_charity]]
not_donating = string(default="Nothing to donate at this time")
donating = string(default="Yeah, got some cool signed stuff to donate!")

[[guest_panel]]
no_panel = string(default="No panel needed")
panel = string(default="Yeah, got a cool panel idea!")

[[guest_travel]]
plane = string(default="Plane")
train = string(default="Train")
car = string(default="Car")
bus = string(default="Bus")
taxi = string(default="Taxi Cab/Uber/Lyft")
other = string(default="Other")

[[guest_rehearsal]]
no = string(default="No, we definitely will not need rehearsal space and we are relinquishing our claims!")
maybe = string(default="We might need rehearsal space; please contact us about our needs.")
yes = string(default="We definitely need rehearsal space; please contact us about our needs.")

[[guest_merch_delivery]]
shipping = string(default="Shipping to the warehouse")
in_person = string(default="Bringing in person")

[[guest_merch_payout_method]]
paypal = string(default="PayPal")
check = string(default="Check")
other = string(default="Other")

[[merch_types]]
cd = string(default="Music")
tshirt = string(default="T-Shirt")
apparel = string(default="Other Apparel")
pin = string(default="Pin")
sticker = string(default="Sticker")
poster = string(default="Poster")
button = string(default="Button")
patch = string(default="Patch")
miscellaneous = string(default="Miscellaneous")

[[album_media]]
cd = string(default="CD")
cassette = string(default="Cassette")
vinyl = string(default="Vinyl")
flash_drive = string(default="Flash Drive")
download = string(default="Download Code")

[[apparel_varieties]]
youth = string(default="Youth")
womens = string(default="Women's")
unisex = string(default="Unisex")

[[apparel_cuts]]
regular = string(default=" ")

[[apparel_sizes]]
xs = string(default="XS")
s = string(default="S")
m = string(default="M")
l = string(default="L")
xl = string(default="XL")
2xl = string(default="2XL")
3xl = string(default="3XL")
4xl = string(default="4XL")
5xl = string(default="5XL")

[[tshirt_varieties]]
youth = string(default="Youth")
womens = string(default="Women's")
unisex = string(default="Unisex")

[[tshirt_cuts]]
regular = string(default=" ")
slim_fit = string(default="Slim Fit")

[[tshirt_sizes]]
xs = string(default="XS")
s = string(default="S")
m = string(default="M")
l = string(default="L")
xl = string(default="XL")
2xl = string(default="2XL")
3xl = string(default="3XL")
4xl = string(default="4XL")
5xl = string(default="5XL")

[[art_show_status]]
unapproved = string(default="Pending Approval")
waitlisted = string(default="Waitlisted")
approved   = string(default="Approved")
declined   = string(default="Declined")

[[art_show_delivery]]
bringing_in = string(default="I'm bringing my own art")
by_mail = string(default="I'm mailing in my art")
agent = string(default="I'm appointing an agent")

[[art_show_access_level]]
art_show = string(default="Art Show")
art_show_admin = string(default="Art Show Admin")

[[art_piece_type]]
original = string(default="Original")
print = string(default="Print")

[[art_piece_gallery]]
general = string(default="General")
mature = string(default="Mature")

[[art_piece_status]]
expected = string(default="Expected")
received = string(default="Received")
not_received = string(default="Not Received")
hanging = string(default="Hanging")
hung = string(default="Hung")
removed = string(default="Removed")
voice_auction = string(default="Voice Auction")
sold = string(default="Sold")
quick_sale = string(default="Quick Sale")
return = string(default="Return to Artist")
paid = string(default="Paid")

[[art_show_payment]]
square = string(default="Square")
stripe = string(default="Stripe")
cash = string(default="Cash")
refund = string(default="Refund")

[[artist_payout_method]]
check = string(default="Check")
other = string(default="Other - See admin notes")

[[authnet_txn_type]]
authcapture = string(default="authCaptureTransaction")
authonly = string(default="authOnlyTransaction")
capture = string(default="priorAuthCaptureTransaction")
refund = string(default="refundTransaction")
void = string(default="voidTransaction")

[[sale]]
merch  = string(default="Merch")
__many__ = string

# Every item here MUST have a corresponding [[section]] listing the sub-categories
[[receipt_item_dept]]
reg_receipt_item = string(default="Registration")
art_show_receipt_item = string(default="Art Show")
dealer_receipt_item = string(default="Dealer")
artist_alley_receipt_item = string(default="Artist Marketplace")
other_receipt_item = string(default="Other")

[[reg_receipt_item]]
badge = string(default="Badge")
group_badge = string(default="Group Badge")
badge_discount = string(default="Badge Discount")
badge_upgrade = string(default="Badge Upgrade")
badge_reprint = string(default="Badge Reprint")
donation = string(default="Donation")
merch = string(default="Extra Merch")
item_comp = string(default="Item Comp")
cancel_item = string(default="Refund/Cancel Item")
other = string(default="Other Adjustment")

[[art_show_receipt_item]]
space = string(default="Space")
mail_in_fee = string(default="Mail In Fee")
purchase = string(default="Purchase")
item_comp = string(default="Item Comp")
cancel_item = string(default="Refund/Cancel Item")
other = string(default="Other Adjustment")

[[dealer_receipt_item]]
badge = string(default="Badge")
table = string(default="Table")
power = string(default="Power")
custom_fee = string(default="Custom Fee")
item_comp = string(default="Item Comp")
cancel_item = string(default="Refund/Cancel Item")
other = string(default="Other Adjustment")

[[artist_alley_receipt_item]]
marketplace = string(default="Artist Marketplace Fee")
item_comp = string(default="Item Comp")
cancel_item = string(default="Refund/Cancel Item")
other = string(default="Other Adjustment")

[[other_receipt_item]]
processing_fees = string(default="Processing Fees")
item_comp = string(default="Item Comp")
cancel_item = string(default="Refund/Cancel Item")
other = string(default="Other Adjustment")

[[payment_method]]
cash   = string(default="Cash")
stripe = string(default="Stripe")
square = string(default="Square")
manual = string(default="Stripe (Manual)")
stripe_error = string(default="Stripe (Error Override)")

[[fee_payment_method]]
cash   = string(default="cash")
credit = string(default="credit")

[[new_reg_payment_method]]
cash   = string(default="Cash")
square = string(default="Square")
stripe_error = string(default="Stripe Error Override")

[[door_payment_method]]
cash   = string(default="Pay with cash")
stripe = string(default="Pay with credit card now (faster, can use prereg line)")
manual = string(default="Pay with credit card at the registration desk")

[[interest]]
[[dept_head_overrides]]
[[event_location]]

[[__many__]]
__many__ = string


[mivs_checklist]
[[__many__]]
start = string(default="")
deadline = string
description = string
name = string(default="")
editable = boolean(default=False)
email_post_con = boolean(default=False)


[dept_checklist]
[[__many__]]
deadline = string
description = string
name = string(default="")
path = string(default="")
email_post_con = boolean(default=False)

[dept_head_checklist]
[[__many__]]
name = string(default="")
deadline = string(default="")
description = string(default="")
path = string(default="")
external_form_url = string(default="")
order = integer(default=999)
email_post_con = boolean(default=False)

[volunteer_checklist]
# Volunteers can log into our volunteer checklist.  This section defines the
# templates which are included to generate the items on that checklist.  Each
# item appears in the order defined by its key, so you can override the items
# or remove them completely by setting the value to the empty string.
1 = string(default="staffing/placeholder_item.html")
2 = string(default="staffing/shirt_item.html")
3 = string(default="staffing/food_item.html")
99 = string(default="staffing/shifts_item.html")  # We always want shift signups to come last
__many__ = string(default="")


[celery]
# Celery configuration, except for broker_url which can be found in [secret]

[sentry]
enabled = boolean(default=False)
dsn = string(default="")
environment = string(default="production")
sample_rate = integer(default=100)
release = string(default="")

[redis]
host = string(default="localhost")
port = integer(default=6379)
db = integer(default=0)
prefix = string(default="")

[hsts]
max_age = integer(default=31536000)
preload = boolean(default=False)
include_subdomains = boolean(default=False)

[appconf]
# This is all CherryPy configuration.

[[/]]
tools.add_email_to_error_page.on = boolean(default=True)
tools.sentry_end_transaction.on = boolean(default=False)
tools.sentry_start_transaction.on = boolean(default=False)
tools.secureheaders.on = boolean(default=False)

# custom logging output:
# turn off normal traceback and header logging on errors, instead use our custom verbose logger that prints more info
tools.log_tracebacks.on = boolean(default=False)
tools.log_headers.on = boolean(default=False)
tools.custom_verbose_logger.on = boolean(default=True)

[loggers]
root = option("TRACE", "DEBUG", "INFO", "WARN", "WARNING", "ERROR", "CRITICAL", default="DEBUG")
cherrypy.error = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="DEBUG")
uber.server = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="INFO")
cherrypy.access = option("TRACE", "DEBUG", "INFO", "WARNING", "WARN", "ERROR", "CRITICAL", default="CRITICAL")
__many__ = option("TRACE", "DEBUG", "INFO", "WARN", "WARNING", "ERROR", "CRITICAL", default="INFO")